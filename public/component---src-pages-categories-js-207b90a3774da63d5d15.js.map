{"version":3,"sources":["webpack:///./src/pages/categories.js","webpack:///./node_modules/core-js/modules/es6.string.fixed.js","webpack:///./node_modules/url-join/lib/url-join.js"],"names":["CategoriesPage","render","group","this","props","data","allMarkdownRemark","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_4__","_components_SEO__WEBPACK_IMPORTED_MODULE_5__","react_helmet__WEBPACK_IMPORTED_MODULE_1__","title","config","siteTitle","className","map","category","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","kebabCase","fieldValue","key","totalCount","Component","pageQuery","__webpack_require__","createHTML","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","normalize","arguments","slice","call","module","exports","undefined"],"mappings":"8QAQqBA,kLACnBC,OAAA,WAAS,IAECC,EADSC,KAAKC,MAAdC,KACeC,kBAAfJ,MAER,OACEK,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACG,EAAA,OAAD,CAAQC,MAAK,gBAAkBC,IAAOC,YACtCR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACbT,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,iBACZd,EAAMe,IAAI,SAAAC,GAAQ,OACjBX,EAAAC,EAAAC,cAACU,EAAA,KAAD,CAAMC,GAAE,eAAiBC,IAAUH,EAASI,YAAeC,IAAKL,EAASI,YACvEf,EAAAC,EAAAC,cAAA,QAAMc,IAAKL,EAASI,YACjBJ,EAASI,WADZ,IACwBf,EAAAC,EAAAC,cAAA,UAAQO,UAAU,SAASE,EAASM,uBAfhCC,aA0B/BC,EAAS,+CChCtBC,EAAQ,IAARA,CAAwB,iBAAAC,GACxB,kBACA,OAAAA,EAAAzB,KAAA,oCCJA,IAAA0B,EAAAC,EAQAC,EARAJ,EAAQ,IAERA,EAAQ,GAERA,EAAQ,KAERA,EAAQ,IAERI,EAEC,WA8DD,kBASA,OAtEA,SAAAC,GACA,IAAAC,EAAA,GAEA,OAAAD,EAAAE,OACA,SAGA,oBAAAF,EAAA,GACA,UAAAG,UAAA,kCAAAH,EAAA,IAIA,GAAAA,EAAA,GAAAI,MAAA,kBAAAJ,EAAAE,OAAA,GACA,IAAAG,EAAAL,EAAAM,QACAN,EAAA,GAAAK,EAAAL,EAAA,GAIAA,EAAA,GAAAI,MAAA,gBACAJ,EAAA,GAAAA,EAAA,GAAAO,QAAA,2BAEAP,EAAA,GAAAA,EAAA,GAAAO,QAAA,0BAGA,QAAAC,EAAA,EAAmBA,EAAAR,EAAAE,OAAqBM,IAAA,CACxC,IAAAC,EAAAT,EAAAQ,GAEA,oBAAAC,EACA,UAAAN,UAAA,kCAAAM,GAGA,KAAAA,IAIAD,EAAA,IAEAC,IAAAF,QAAA,cAKAE,EAFAD,EAAAR,EAAAE,OAAA,EAEAO,EAAAF,QAAA,aAGAE,EAAAF,QAAA,cAGAN,EAAAS,KAAAD,IAGA,IAAAE,EAAAV,EAAAW,KAAA,KAKAC,GAFAF,IAAAJ,QAAA,yBAEAO,MAAA,KAEA,OADAH,EAAAE,EAAAP,SAAAO,EAAAX,OAAA,UAAAW,EAAAD,KAAA,KAaAG,CANA,iBAAAC,UAAA,GACAA,UAAA,GAEA,GAAAC,MAAAC,KAAAF,cArEmCG,EAAAC,QAAAD,EAAAC,QAAArB,SAAwHsB,KAAAvB,EAAA,mBAAjBD,EAAA,GAAiBA,EAAAqB,KAAAE,EAAAzB,EAAAyB,EAAAD,GAAAtB,KAAAsB,EAAAC,QAAAtB","file":"component---src-pages-categories-js-207b90a3774da63d5d15.js","sourcesContent":["import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { Link, graphql } from 'gatsby'\nimport kebabCase from 'lodash.kebabcase'\nimport Layout from '../layout'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nexport default class CategoriesPage extends Component {\n  render() {\n    const { data } = this.props\n    const { group } = data.allMarkdownRemark\n\n    return (\n      <Layout>\n        <SEO />\n        <Helmet title={`Categories â€“ ${config.siteTitle}`} />\n        <div className=\"container\">\n          <h1>Categories</h1>\n          <div className=\"tag-container\">\n            {group.map(category => (\n              <Link to={`/categories/${kebabCase(category.fieldValue)}`} key={category.fieldValue}>\n                <span key={category.fieldValue}>\n                  {category.fieldValue} <strong className=\"count\">{category.totalCount}</strong>\n                </span>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query CategoriesQuery {\n    allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___categories) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});"],"sourceRoot":""}