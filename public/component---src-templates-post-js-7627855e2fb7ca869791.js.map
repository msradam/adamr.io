{"version":3,"sources":["webpack:///./src/components/PostTags.js","webpack:///./src/templates/post.js","webpack:///./src/utils/global.js"],"names":["PostTags","render","_this$props","this","props","tags","size","react_default","a","createElement","className","map","tag","gatsby_browser_entry","key","style","textDecoration","to","kebabCase","Component","PostTemplate","thumbnail","slug","pageContext","postNode","data","markdownRemark","post","frontmatter","id","category_id","config","postDefaultCategoryID","childImageSharp","fixed","date","formatDate","githubLink","editOnGithub","twitterShare","siteUrl","encodeURIComponent","title","layout","Helmet_default","siteTitle","SEO","postPath","postSEO","gatsby_image_default","href","target","PostTags_PostTags","dangerouslySetInnerHTML","__html","html","pageQuery","__webpack_require__","d","__webpack_exports__","url_join__WEBPACK_IMPORTED_MODULE_0__","url_join__WEBPACK_IMPORTED_MODULE_0___default","n","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_1__","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_1___default","moment__WEBPACK_IMPORTED_MODULE_2__","moment__WEBPACK_IMPORTED_MODULE_2___default","moment","utc","format","dateFormat","dateFromFormat","urljoin","repo"],"mappings":"wMAIqBA,kLACnBC,OAAA,WAAS,IAAAC,EACgBC,KAAKC,MAApBC,EADDH,EACCG,KAAMC,EADPJ,EACOI,KAEd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZL,GACCA,EAAKM,IAAI,SAAAC,GAAG,OACVL,EAAAC,EAAAC,cAACI,EAAA,KAAD,CAAMC,IAAKF,EAAKG,MAAO,CAAEC,eAAgB,QAAUC,GAAE,SAAWC,IAAUN,GAArB,KACnDL,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,GAAOM,WATAO,mICMjBC,kLACnBnB,OAAA,WAAS,IAIHoB,EAHIC,EAASnB,KAAKC,MAAMmB,YAApBD,KACFE,EAAWrB,KAAKC,MAAMqB,KAAKC,eAC3BC,EAAOH,EAASI,YAGjBD,EAAKE,KACRF,EAAKE,GAAKP,GAGPK,EAAKG,cACRH,EAAKG,YAAcC,IAAOC,uBAGxBL,EAAKN,YACPA,EAAYM,EAAKN,UAAUY,gBAAgBC,OAG7C,IAAMC,EAAOC,YAAWT,EAAKQ,MACvBE,EAAaC,YAAaX,GAE1BY,GAD6CR,IAAOS,QAAWb,EAAKL,KACxD,iCAAoCmB,mBAAmBd,EAAKe,OAA5D,QAChBX,IAAOS,QADS,IAEdb,EAAKL,KAFS,kBAIlB,OACEf,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,KACED,EAAAC,EAAAC,cAAA,aAAWkB,EAAKe,MAAhB,MAA2BX,IAAOc,YAEpCtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAKC,SAAUzB,EAAME,SAAUA,EAAUwB,SAAO,IAChDzC,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAS,kBAAoBW,EAA6B,GAAjB,iBAC9CA,EAAYd,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CAAK0B,MAAOP,EAAKN,UAAUY,gBAAgBC,QAAY,KACpE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKkB,EAAKe,OACVnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQyB,GAD1B,IAEE5B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAewC,KAAMX,GAAlC,SAFF,IAMEhC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcwC,KAAMb,EAAYc,OAAO,UAApD,sBAIF5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAU/C,KAAMsB,EAAKtB,SAGzBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAO2C,wBAAyB,CAAEC,OAAQ9B,EAAS+B,QAClEhD,EAAAC,EAAAC,cAAA,WACG,IACDF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAwBwC,KAAMX,EAAcY,OAAO,UAAhE,SAEK,WAvDyBhC,aAgE7BqC,EAAS,+CC1EtBC,EAAAC,EAAAC,EAAA,sBAAAvB,IAAAqB,EAAAC,EAAAC,EAAA,sBAAArB,IAAA,IAAAsB,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAAK,EAAAC,GAAAE,EAAAR,EAAA,KAAAS,EAAAT,EAAAK,EAAAG,GAIM7B,EAAa,SAAAD,GAAI,OAAIgC,IAAOC,IAAIjC,GAAMkC,OAAOtC,IAAOuC,aAEpDhC,EAAe,SAAAX,GACnB,IAAMQ,EAAOgC,IAAOC,IAAIzC,EAAKQ,MAAMkC,OAAOtC,IAAOwC,gBACjD,OAAOC,IAAQzC,IAAO0C,KAAM,6BAAiCtC,EAA/C,IAAuDR,EAAKL,KAA5D","file":"component---src-templates-post-js-7627855e2fb7ca869791.js","sourcesContent":["import React, { Component } from 'react'\nimport kebabCase from 'lodash.kebabcase'\nimport { Link } from 'gatsby'\n\nexport default class PostTags extends Component {\n  render() {\n    const { tags, size } = this.props\n\n    return (\n      <div className=\"tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link key={tag} style={{ textDecoration: 'none' }} to={`/tags/${kebabCase(tag)}/`}>\n              <span className={size}>{tag}</span>\n            </Link>\n          ))}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Layout from '../layout'\nimport PostTags from '../components/PostTags'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\nimport { formatDate, editOnGithub } from '../utils/global'\n\nexport default class PostTemplate extends Component {\n  render() {\n    const { slug } = this.props.pageContext\n    const postNode = this.props.data.markdownRemark\n    const post = postNode.frontmatter\n    let thumbnail\n\n    if (!post.id) {\n      post.id = slug\n    }\n\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID\n    }\n\n    if (post.thumbnail) {\n      thumbnail = post.thumbnail.childImageSharp.fixed\n    }\n\n    const date = formatDate(post.date)\n    const githubLink = editOnGithub(post)\n    const twitterUrl = `https://twitter.com/search?q=${config.siteUrl}/${post.slug}/`\n    const twitterShare = `http://twitter.com/share?text=${encodeURIComponent(post.title)}&url=${\n      config.siteUrl\n    }/${post.slug}/&via=seriffic`\n\n    return (\n      <Layout>\n        <Helmet>\n          <title>{`${post.title} – ${config.siteTitle}`}</title>\n        </Helmet>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <article className=\"single container\">\n          <header className={`single-header ${!thumbnail ? 'no-thumbnail' : ''}`}>\n            {thumbnail ? <Img fixed={post.thumbnail.childImageSharp.fixed} /> : null}\n            <div className=\"flex\">\n              <h1>{post.title}</h1>\n              <div className=\"post-meta\">\n                <time className=\"date\">{date}</time>/\n                <a className=\"twitter-link\" href={twitterShare}>\n                  Share\n                </a>\n                /\n                <a className=\"github-link\" href={githubLink} target=\"_blank\">\n                  Edit on Github ✏️\n                </a>\n              </div>\n              <PostTags tags={post.tags} />\n            </div>\n          </header>\n          <div className=\"post\" dangerouslySetInnerHTML={{ __html: postNode.html }} />\n          <div>\n            {' '}\n            <a className=\"button twitter-button\" href={twitterShare} target=\"_blank\">\n              Share\n            </a>{' '}\n          </div>\n        </article>\n      </Layout>\n    )\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        thumbnail {\n          childImageSharp {\n            fixed(width: 150, height: 150) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        slug\n        date\n        categories\n        tags\n        template\n      }\n      fields {\n        slug\n        date\n      }\n    }\n  }\n`\n","import urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\nimport moment from 'moment'\n\nconst formatDate = date => moment.utc(date).format(config.dateFormat)\n\nconst editOnGithub = post => {\n  const date = moment.utc(post.date).format(config.dateFromFormat)\n  return urljoin(config.repo, '/blob/master/content/posts', `${date}-${post.slug}.md`)\n}\n\nexport { formatDate, editOnGithub }\n"],"sourceRoot":""}